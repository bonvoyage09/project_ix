import os
import re
import asyncio
from typing import Optional
from datetime import datetime, time as dtime

import aiohttp
import aiosqlite
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
    CallbackQuery
)
from dotenv import load_dotenv

# ---------- ENV ----------
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ONEC_URL  = os.getenv("ONEC_URL")                 # –Ω–∞–ø—Ä–∏–º–µ—Ä https://host/ib/hs/hr/check_passport
ONEC_USER = os.getenv("ONEC_USER")
ONEC_PASS = os.getenv("ONEC_PASS")
ONEC_DECISION_URL = os.getenv("ONEC_DECISION_URL")# –Ω–∞–ø—Ä–∏–º–µ—Ä https://host/ib/hs/hr/tardy_decision
DB_PATH   = os.getenv("DB_PATH", "bot.db")
TIMEZONE  = os.getenv("TIMEZONE", "Asia/Tashkent")
ONEC_SYNC_URL = os.getenv("ONEC_SYNC_URL")

# ---------- TIMEZONE HELPERS ----------
# zoneinfo –¥–æ—Å—Ç—É–ø–µ–Ω —Å Python 3.9; –¥–ª—è 3.8 –∏—Å–ø–æ–ª—å–∑—É–µ–º pytz
try:
    from zoneinfo import ZoneInfo
    _HAVE_ZONEINFO = True
except Exception:
    _HAVE_ZONEINFO = False
    import pytz

def now_local_dt() -> datetime:
    if _HAVE_ZONEINFO:
        return datetime.now(ZoneInfo(TIMEZONE))
    else:
        return datetime.now(pytz.timezone(TIMEZONE))

def to_local_hm_from_submitted(s: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç HH:MM –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏ submitted_at.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
      - "YYYY-MM-DD HH:MM:SS" (—É–∂–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ)
      - "YYYY-MM-DDTHH:MM:SS(.ffffff)" (—Å—Ç–∞—Ä–æ–µ UTC)
    """
    if not s:
        return "‚Äî"
    fmts = ["%Y-%m-%d %H:%M:%S", "%Y-%m-%dT%H:%M:%S.%f", "%Y-%m-%dT%H:%M:%S"]
    dt = None
    for fmt in fmts:
        try:
            dt = datetime.strptime(s, fmt)
            break
        except ValueError:
            continue
    if dt is None:
        return s  # –∫–∞–∫ –µ—Å—Ç—å
    if "T" in s:  # —Å—á–∏—Ç–∞–ª–∏ –∫–∞–∫ UTC ‚Üí –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—É—é
        if _HAVE_ZONEINFO:
            dt = dt.replace(tzinfo=ZoneInfo("UTC")).astimezone(ZoneInfo(TIMEZONE))
        else:
            dt = pytz.UTC.localize(dt).astimezone(pytz.timezone(TIMEZONE))
    return dt.strftime("%H:%M")

def submitted_now_str() -> str:
    """–°—Ç—Ä–æ–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: YYYY-MM-DD HH:MM:SS"""
    return datetime.utcnow().isoformat()

def now_local_hm() -> str:
    return now_local_dt().strftime("%H:%M")

bot = Bot(BOT_TOKEN)
dp = Dispatcher()

# ---------- –í–ê–õ–ò–î–ê–¶–ò–Ø ----------
PASSPORT_RE  = re.compile(r"^[A-Z]{2}\d{7}$")
BIRTHDATE_RE = re.compile(r"^\d{2}\.\d{2}\.\d{4}$")  # dd.mm.yyyy
TIME_RE      = re.compile(r"^\d{2}:\d{2}$")          # HH:MM 24h
CUT_OFF = dtime(8, 10)  # –î–æ 08:10 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è

class Reg(StatesGroup):
    passport = State()
    birthdate = State()

class Tardy(StatesGroup):
    waiting_reason = State()
    waiting_start  = State()
    waiting_end    = State()

def normalize_passport(text: str) -> str:
    return re.sub(r"\s+", "", text.strip().upper())

def valid_birthdate(s: str) -> bool:
    if not BIRTHDATE_RE.match(s):
        return False
    try:
        datetime.strptime(s, "%d.%m.%Y")
        return True
    except ValueError:
        return False

def parse_time_hhmm(s: str) -> Optional[dtime]:
    if not TIME_RE.match(s.strip()):
        return None
    try:
        return datetime.strptime(s.strip(), "%H:%M").time()
    except Exception:
        return None

# ---------- –•–µ–ª–ø–µ—Ä—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ----------
def _format_employee_notice(r: dict, emp_name: str, mgr_name: str,
                            status_text: str, status_emoji: str) -> str:
    period = f"{r.get('start_time') or '‚Äî'}‚Äì{r.get('end_time') or '‚Äî'}"
    sent_at = to_local_hm_from_submitted(r.get('submitted_at', ''))
    reason = r.get('reason') or "‚Äî"
    return (
        "–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–æ–∑–¥–∞–Ω–∏–µ\n"
        f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {emp_name}\n"
        f"–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: {mgr_name}\n\n"
        f"–ü–µ—Ä–∏–æ–¥: {period}\n"
        f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
        f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_at}\n\n"
        f"–°—Ç–∞—Ç—É—Å: {status_text} {status_emoji}"
    )

# ---------- –ö–õ–ê–í–ò–ê–¢–£–†–ê ----------
def kb_main(is_manager: bool) -> ReplyKeyboardMarkup:
    rows = [
        [KeyboardButton(text="–Ø –æ–ø–æ–∑–¥–∞–ª")],  # —É –≤—Å–µ—Ö
        [KeyboardButton(text="üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å 1–°")],
    ]
    if is_manager:
        rows.insert(0, [KeyboardButton(text="–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –æ–ø–æ–∑–¥–∞–Ω–∏–µ")])  # –¥–æ–ø.–∫–Ω–æ–ø–∫–∞ —Ç–æ–ª—å–∫–æ —É —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
    return ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True)

# ---------- –ë–ê–ó–ê –î–ê–ù–ù–´–• ----------
async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        await db.execute("""
        CREATE TABLE IF NOT EXISTS users (
            tg_id TEXT PRIMARY KEY,
            passport TEXT,
            birthdate TEXT,
            full_name TEXT,
            registered_at TEXT,
            is_manager INTEGER DEFAULT 0,
            supervisor_tg_id TEXT
        )
        """)
        cols = await (await db.execute("PRAGMA table_info(users)")).fetchall()
        existing = {c[1] for c in cols}
        if "is_manager" not in existing:
            await db.execute("ALTER TABLE users ADD COLUMN is_manager INTEGER DEFAULT 0")
        if "supervisor_tg_id" not in existing:
            await db.execute("ALTER TABLE users ADD COLUMN supervisor_tg_id TEXT")

        # –ó–∞—è–≤–∫–∏ –Ω–∞ –æ–ø–æ–∑–¥–∞–Ω–∏–µ
        await db.execute("""
        CREATE TABLE IF NOT EXISTS tardy_requests (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            employee_tg_id TEXT NOT NULL,
            manager_tg_id  TEXT,
            reason TEXT NOT NULL,
            start_time TEXT,
            end_time   TEXT,
            submitted_at TEXT NOT NULL,
            status TEXT NOT NULL DEFAULT 'pending'
        )
        """)
        cols2 = await (await db.execute("PRAGMA table_info(tardy_requests)")).fetchall()
        existing2 = {c[1] for c in cols2}
        if "start_time" not in existing2:
            await db.execute("ALTER TABLE tardy_requests ADD COLUMN start_time TEXT")
        if "end_time" not in existing2:
            await db.execute("ALTER TABLE tardy_requests ADD COLUMN end_time TEXT")

        await db.commit()

async def get_user(tg_id: str) -> Optional[dict]:
    async with aiosqlite.connect(DB_PATH) as db:
        db.row_factory = aiosqlite.Row
        row = await (await db.execute("SELECT * FROM users WHERE tg_id = ?", (tg_id,))).fetchone()
        return dict(row) if row else None

async def upsert_user(
    tg_id: str, passport: str, birthdate: str, full_name: str,
    is_manager: bool = False, supervisor_tg_id: Optional[str] = None
):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
        INSERT INTO users (tg_id, passport, birthdate, full_name, registered_at, is_manager, supervisor_tg_id)
        VALUES (?, ?, ?, ?, ?, ?, ?)
        ON CONFLICT(tg_id) DO UPDATE SET
            passport=excluded.passport,
            birthdate=excluded.birthdate,
            full_name=excluded.full_name,
            registered_at=excluded.registered_at,
            is_manager=excluded.is_manager,
            supervisor_tg_id=excluded.supervisor_tg_id
        """, (tg_id, passport, birthdate, full_name, now_local_dt().strftime("%Y-%m-%d %H:%M:%S"),
              1 if is_manager else 0, supervisor_tg_id))
        await db.commit()

async def delete_user(tg_id: str):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("DELETE FROM users WHERE tg_id = ?", (tg_id,))
        await db.commit()

async def create_tardy_request(employee_tg_id: str, manager_tg_id: str, reason: str,
                               start_hm: Optional[str], end_hm: Optional[str]) -> int:
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("""
        INSERT INTO tardy_requests (employee_tg_id, manager_tg_id, reason, start_time, end_time, submitted_at, status)
        VALUES (?, ?, ?, ?, ?, ?, 'pending')
        """, (employee_tg_id, manager_tg_id, reason, start_hm, end_hm, submitted_now_str()))
        await db.commit()
        return cur.lastrowid

async def set_user_supervisor(tg_id: str, supervisor_tg_id: Optional[str]):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "UPDATE users SET supervisor_tg_id = ? WHERE tg_id = ?",
            (supervisor_tg_id, tg_id)
        )
        await db.commit()


async def get_pending_tardy_for_manager(manager_tg_id: str):
    async with aiosqlite.connect(DB_PATH) as db:
        db.row_factory = aiosqlite.Row
        rows = await (await db.execute("""
            SELECT * FROM tardy_requests
            WHERE manager_tg_id = ? AND status = 'pending'
            ORDER BY submitted_at DESC
        """, (manager_tg_id,))).fetchall()
        return [dict(r) for r in rows]

async def get_tardy(req_id: int) -> Optional[dict]:
    async with aiosqlite.connect(DB_PATH) as db:
        db.row_factory = aiosqlite.Row
        row = await (await db.execute("SELECT * FROM tardy_requests WHERE id = ?", (req_id,))).fetchone()
        return dict(row) if row else None

async def set_tardy_status(req_id: int, status: str):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE tardy_requests SET status = ? WHERE id = ?", (status, req_id))
        await db.commit()

# ---------- –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–ï –° 1–° ----------
def _make_auth():
    return aiohttp.BasicAuth(ONEC_USER, ONEC_PASS) if ONEC_USER and ONEC_PASS else None

async def register_in_1c(passport: str, birthdate: str, user_id: str) -> tuple[int, dict, str]:
    """POST –Ω–∞ 1–° –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (status, json, raw_text)."""
    payload = {"passport": passport, "birthdate": birthdate, "user_id": user_id}
    auth = _make_auth()
    async with aiohttp.ClientSession(auth=auth) as session:
        async with session.post(ONEC_URL, json=payload) as resp:
            status = resp.status
            txt = await resp.text()
            try:
                js = await resp.json(content_type=None)
            except Exception:
                js = {}
            return status, js, txt

async def sync_supervisor_from_1c(user_id: str) -> Optional[str]:
    """
    –î–µ–ª–∞–µ—Ç POST –Ω–∞ ONEC_SYNC_URL —Å –ø–∞—Å–ø–æ—Ä—Ç–æ–º –∏ –¥–∞—Ç–æ–π —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –û–∂–∏–¥–∞–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ id –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ users.supervisor_tg_id.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π supervisor_tg_id –ª–∏–±–æ None.
    """
    user = await get_user(user_id)
    if not user:
        return None
    passport = user.get("passport")
    birthdate = user.get("birthdate")
    if not passport or not birthdate:
        return None

    payload = {"passport": passport, "birthdate": birthdate}
    auth = _make_auth()
    async with aiohttp.ClientSession(auth=auth) as session:
        async with session.post(ONEC_SYNC_URL, json=payload) as resp:
            txt = await resp.text()
            try:
                js = await resp.json(content_type=None)
            except Exception:
                js = {}

    # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã—Ç–∞—â–∏—Ç—å ID –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞ –∏–∑ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–ª—é—á–µ–π –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∏–∑ —Ü–∏—Ñ—Ä
    raw_id = (
        js.get("supervisor_tg_id")
        or js.get("manager_tg_id")
        or js.get("managerId")
        or js.get("supervisorId")
        or js.get("supervisor")
        or js.get("manager")
        or ""
    )
    # –∏–∑–≤–ª–µ—á—ë–º —Ü–∏—Ñ—Ä—ã –Ω–∞ —Å–ª—É—á–∞–π —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤–∏–¥–∞ "tg://user?id=123456789"
    m = re.search(r"\d{5,}", str(raw_id))
    supervisor_tg_id = m.group(0) if m else None

    await set_user_supervisor(user_id, supervisor_tg_id)
    return supervisor_tg_id


# ----- NEW: –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ—à–µ–Ω–∏—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –≤ 1–° -----
async def send_decision_to_1c(r: dict, decision: str, emp_name: str, mgr_name: str):
    """
    r ‚Äî –∑–∞–ø–∏—Å—å –∏–∑ tardy_requests (dict)
    decision ‚Äî 'approved' | 'rejected'
    """
    if not ONEC_DECISION_URL:
        return
    payload = {
        "req_id": r["id"],
        "employee_tg_id": str(r["employee_tg_id"]),
        "manager_tg_id":  str(r["manager_tg_id"]),
        "employee_name":  emp_name,
        "manager_name":   mgr_name,
        "reason":         r.get("reason"),
        "start":          r.get("start_time"),     # "HH:MM"
        "end":            r.get("end_time"),       # "HH:MM"
        "submitted_at":   r.get("submitted_at"),   # –ª–æ–∫–∞–ª—å–Ω–∞—è "YYYY-MM-DD HH:MM:SS" (–∏–ª–∏ —Å—Ç–∞—Ä—ã–µ ISO)
        "decided_at":     now_local_dt().strftime("%Y-%m-%d %H:%M:%S"),
        "decision":       decision                  # 'approved' | 'rejected'
    }
    auth = _make_auth()
    try:
        async with aiohttp.ClientSession(auth=auth) as session:
            async with session.post(ONEC_DECISION_URL, json=payload) as resp:
                _ = await resp.text()  # –º–æ–∂–Ω–æ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    except Exception:
        # –Ω–µ —Ä–æ–Ω—è–µ–º UX, –ø—Ä–æ—Å—Ç–æ –º–æ–ª—á–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º (–∏–ª–∏ –ª–æ–≥)
        pass

async def refresh_from_1c_by_tg(user_id: str) -> Optional[dict]:
    user = await get_user(user_id)
    if not user:
        return None
    status, js, _ = await register_in_1c(user["passport"], user["birthdate"], user_id)
    if status == 200:
        name = js.get("fullName") or js.get("name") or user.get("full_name") or "—Å–æ—Ç—Ä—É–¥–Ω–∏–∫"
        is_manager = bool(js.get("isManager") or js.get("is_manager") or js.get("–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å") or False)
        supervisor_tg_id = js.get("supervisor_tg_id") or js.get("manager_tg_id") or user.get("supervisor_tg_id")
        await upsert_user(user_id, user["passport"], user["birthdate"], name, is_manager, supervisor_tg_id)
        return {"fullName": name, "isManager": is_manager, "supervisor_tg_id": supervisor_tg_id}
    return None

# ---------- –•–≠–ù–î–õ–ï–†–´ ----------
@dp.message(CommandStart())
async def start(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)
    user = await get_user(user_id)
    if user:
        await state.clear()
        name = user.get("full_name") or "—Å–æ—Ç—Ä—É–¥–Ω–∏–∫"
        is_mgr = bool(user.get("is_manager"))
        await message.answer(f"‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫: {name}", reply_markup=kb_main(is_mgr))
        return

    await state.clear()
    await state.set_state(Reg.passport)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–∏—é –∏ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞ (–ø—Ä–∏–º–µ—Ä: AD1234567).")

@dp.message(Command("reset"))
async def reset_registration(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)
    await delete_user(user_id)
    await state.clear()
    await state.set_state(Reg.passport)
    await message.answer("üîÅ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞.\n–í–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–∏—é –∏ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞ (–ø—Ä–∏–º–µ—Ä: AD1234567).")

@dp.message(Command("refresh"))
async def refresh_user(message: Message):
    user_id = str(message.from_user.id)
    updated = await refresh_from_1c_by_tg(user_id)
    if updated:
        await message.answer(
            f"üîÑ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ 1–°.\n"
            f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {updated.get('fullName')}\n"
            f"–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: {'–¥–∞' if updated.get('isManager') else '–Ω–µ—Ç'}",
            reply_markup=kb_main(bool(updated.get("isManager")))
        )
    else:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ 1–°. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ 1–° –≤–µ—Ä–Ω—É–ª–∞ –Ω–µ 200.")

@dp.message(F.text == "üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å 1–°")
async def sync_with_1c(message: Message):
    user_id = str(message.from_user.id)
    user = await get_user(user_id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è: /start")
        return

    await message.answer("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é —Å 1–°‚Ä¶")
    try:
        supervisor_id = await sync_supervisor_from_1c(user_id)
        if supervisor_id:
            await message.answer(
                f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å (TG ID): {supervisor_id}",
                reply_markup=kb_main(bool(user.get("is_manager")))
            )
        else:
            await message.answer("‚ö†Ô∏è 1–° –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è.")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")



@dp.message(Command("whoami"))
async def whoami(message: Message):
    await message.answer(f"–í–∞—à Telegram ID: {message.from_user.id}")

@dp.message(Reg.passport, F.text)
async def ask_birthdate(message: Message, state: FSMContext):
    p = normalize_passport(message.text)
    if not PASSPORT_RE.match(p):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: AD1234567 (2 –±—É–∫–≤—ã + 7 —Ü–∏—Ñ—Ä). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    await state.update_data(passport=p)
    await state.set_state(Reg.birthdate)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–ø—Ä–∏–º–µ—Ä: 30.09.2005).")

@dp.message(Reg.birthdate, F.text)
async def do_register(message: Message, state: FSMContext):
    b = message.text.strip()
    if not valid_birthdate(b):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ù—É–∂–µ–Ω –¥–¥.–º–º.–≥–≥–≥–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 30.09.2005).")
        return

    data = await state.get_data()
    passport = data["passport"]
    user_id = str(message.from_user.id)

    await message.answer("üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å 1–°‚Ä¶")
    try:
        status, js, raw = await register_in_1c(passport, b, user_id)
        if status == 200:
            name = js.get("fullName") or js.get("name") or "—Å–æ—Ç—Ä—É–¥–Ω–∏–∫"
            is_manager = bool(js.get("isManager") or js.get("is_manager") or js.get("–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å") or False)
            supervisor_tg_id = js.get("supervisor_tg_id") or js.get("manager_tg_id")

            await upsert_user(user_id, passport, b, name, is_manager, supervisor_tg_id)
            await message.answer(f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞\nüë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {name}", reply_markup=kb_main(is_manager))
            await state.clear()

        elif status in (404, 204):
            await message.answer("‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å —Ç–∞–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        elif status == 409:
            await message.answer("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (–¥—É–±–ª–∏–∫–∞—Ç—ã). –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        elif status == 400:
            reason = js.get("reason") or "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."
            await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {reason}")
        else:
            await message.answer(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç 1–° ({status}): {raw[:500]}")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å 1–°: {e}")

# ---- ¬´–Ø –æ–ø–æ–∑–¥–∞–ª¬ª (–¥–ª—è –≤—Å–µ—Ö) ----
@dp.message(F.text == "–Ø –æ–ø–æ–∑–¥–∞–ª")
async def tardy_start(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)
    user = await get_user(user_id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è: /start")
        return

    now_t = now_local_dt().time()
    if now_t <= CUT_OFF:
        await message.answer("‚è± –û–ø–æ–∑–¥–∞–Ω–∏–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
        return

    await state.set_state(Tardy.waiting_reason)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ–ø–æ–∑–¥–∞–Ω–∏—è –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:")

@dp.message(Tardy.waiting_reason, F.text)
async def tardy_reason(message: Message, state: FSMContext):
    reason = message.text.strip()
    if not reason:
        await message.answer("–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ–ø–æ–∑–¥–∞–Ω–∏—è:")
        return
    await state.update_data(tardy_reason=reason)
    await state.set_state(Tardy.waiting_start)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ *–≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞* –æ–ø–æ–∑–¥–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:20):", parse_mode=None)

@dp.message(Tardy.waiting_start, F.text)
async def tardy_start_time(message: Message, state: FSMContext):
    s = message.text.strip()
    t = parse_time_hhmm(s)
    if not t:
        await message.answer("‚è± –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:20):")
        return
    await state.update_data(tardy_start=s)
    await state.set_state(Tardy.waiting_end)
    await message.answer("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ *–≤—Ä–µ–º—è –∫–æ–Ω—Ü–∞* –æ–ø–æ–∑–¥–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:45):", parse_mode=None)

@dp.message(Tardy.waiting_end, F.text)
async def tardy_end_time(message: Message, state: FSMContext):
    e_str = message.text.strip()
    e_time = parse_time_hhmm(e_str)
    if not e_time:
        await message.answer("‚è± –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∫–æ–Ω—Ü–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:45):")
        return

    data = await state.get_data()
    start_str = data.get("tardy_start")
    reason = data.get("tardy_reason")
    user_id = str(message.from_user.id)
    user = await get_user(user_id)

    # —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    s_time = parse_time_hhmm(start_str) if start_str else None
    if not s_time:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ: ¬´–Ø –æ–ø–æ–∑–¥–∞–ª¬ª.")
        await state.clear()
        return

    if e_time < s_time:
        await message.answer("–í—Ä–µ–º—è –∫–æ–Ω—Ü–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª–∞. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∫–æ–Ω—Ü–∞ –µ—â—ë —Ä–∞–∑ (HH:MM):")
        return

    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å: /start")
        await state.clear()
        return

    manager_tg_id = str(user.get("supervisor_tg_id") or "").strip()
    if not manager_tg_id.isdigit():
        await message.answer("–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ —É–∫–∞–∑–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è.")
        await state.clear()
        return

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É
    req_id = await create_tardy_request(user_id, manager_tg_id, reason, start_str, e_str)

    # —É–≤–µ–¥–æ–º–ª—è–µ–º —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
    text_for_manager = (
        "–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–æ–∑–¥–∞–Ω–∏–µ\n"
        f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {user.get('full_name')}\n"
        f"–ü–µ—Ä–∏–æ–¥: {start_str}‚Äì{e_str}\n"
        f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
        f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {now_local_hm()}"
    )
    ikb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"tardy_ok:{req_id}"),
        InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å",  callback_data=f"tardy_rej:{req_id}")
    ]])

    try:
        await bot.send_message(int(manager_tg_id), text_for_manager, reply_markup=ikb)
        await message.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é.")
    except Exception:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é (–≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ).")
    finally:
        await state.clear()

# ---- ¬´–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –æ–ø–æ–∑–¥–∞–Ω–∏–µ¬ª (–¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π) ----
@dp.message(F.text == "–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –æ–ø–æ–∑–¥–∞–Ω–∏–µ")
async def tardy_list(message: Message):
    manager_id = str(message.from_user.id)
    me = await get_user(manager_id)
    if not me or not me.get("is_manager"):
        await message.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º.")
        return

    pending = await get_pending_tardy_for_manager(manager_id)
    if not pending:
        await message.answer("–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.")
        return

    for r in pending:
        emp = await get_user(r["employee_tg_id"])
        emp_name = emp.get('full_name') if emp else r["employee_tg_id"]
        local_hm = to_local_hm_from_submitted(r.get('submitted_at'))
        period = f"{r.get('start_time') or '‚Äî'}‚Äì{r.get('end_time') or '‚Äî'}"
        text = (
            f"–ó–∞–ø—Ä–æ—Å #{r['id']}\n"
            f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {emp_name}\n"
            f"–ü–µ—Ä–∏–æ–¥: {period}\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {r['reason']}\n"
            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {local_hm}"
        )
        ikb = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"tardy_ok:{r['id']}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å",  callback_data=f"tardy_rej:{r['id']}")
        ]])
        await message.answer(text, reply_markup=ikb)

# ---- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –û–¥–æ–±—Ä–∏—Ç—å/–û—Ç–∫–∞–∑–∞—Ç—å ----
@dp.callback_query(F.data.startswith("tardy_ok:"))
async def tardy_approve(cb: CallbackQuery):
    req_id = int(cb.data.split(":")[1])
    r = await get_tardy(req_id)
    if not r or r["status"] != "pending":
        await cb.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞", show_alert=True)
        return
    if str(cb.from_user.id) != str(r["manager_tg_id"]):
        await cb.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∑–∞—è–≤–∫–∏", show_alert=True)
        return

    await set_tardy_status(req_id, "approved")
    await cb.message.edit_text(cb.message.text + "\n\n–°—Ç–∞—Ç—É—Å: ‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ")

    # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É (–ø–æ–¥—Ä–æ–±–Ω–æ–µ)
    emp = await get_user(r["employee_tg_id"])
    mgr = await get_user(r["manager_tg_id"])
    emp_name = (emp or {}).get("full_name") or str(r["employee_tg_id"])
    mgr_name = (mgr or {}).get("full_name") or str(r["manager_tg_id"])
    msg_emp = _format_employee_notice(r, emp_name, mgr_name, "–û–¥–æ–±—Ä–µ–Ω–æ", "‚úÖ")
    try:
        await bot.send_message(r["employee_tg_id"], msg_emp)
    except Exception:
        pass

    # –∑–∞–ø–∏—Å—å —Ä–µ—à–µ–Ω–∏—è –≤ 1–°
    await send_decision_to_1c(r, "approved", emp_name, mgr_name)
    await cb.answer("–û–¥–æ–±—Ä–µ–Ω–æ")

@dp.callback_query(F.data.startswith("tardy_rej:"))
async def tardy_reject(cb: CallbackQuery):
    req_id = int(cb.data.split(":")[1])
    r = await get_tardy(req_id)
    if not r or r["status"] != "pending":
        await cb.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞", show_alert=True)
        return
    if str(cb.from_user.id) != str(r["manager_tg_id"]):
        await cb.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∑–∞—è–≤–∫–∏", show_alert=True)
        return

    await set_tardy_status(req_id, "rejected")
    await cb.message.edit_text(cb.message.text + "\n\n–°—Ç–∞—Ç—É—Å: ‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ")

    # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É (–ø–æ–¥—Ä–æ–±–Ω–æ–µ)
    emp = await get_user(r["employee_tg_id"])
    mgr = await get_user(r["manager_tg_id"])
    emp_name = (emp or {}).get("full_name") or str(r["employee_tg_id"])
    mgr_name = (mgr or {}).get("full_name") or str(r["manager_tg_id"])
    msg_emp = _format_employee_notice(r, emp_name, mgr_name, "–û—Ç–∫–∞–∑–∞–Ω–æ", "‚ùå")
    try:
        await bot.send_message(r["employee_tg_id"], msg_emp)
    except Exception:
        pass

    # –∑–∞–ø–∏—Å—å —Ä–µ—à–µ–Ω–∏—è –≤ 1–°
    await send_decision_to_1c(r, "rejected", emp_name, mgr_name)
    await cb.answer("–û—Ç–∫–ª–æ–Ω–µ–Ω–æ")

# ---------- MAIN ----------
async def main():
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
